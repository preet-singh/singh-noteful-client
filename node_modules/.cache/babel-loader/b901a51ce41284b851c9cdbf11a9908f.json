{"ast":null,"code":"import _classCallCheck from \"/Users/Preet/Desktop/singh-noteful-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Preet/Desktop/singh-noteful-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Preet/Desktop/singh-noteful-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Preet/Desktop/singh-noteful-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Preet/Desktop/singh-noteful-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Preet/Desktop/singh-noteful-client/src/AddNote.js\";\nimport React, { Component } from 'react';\nimport config from './config';\nimport ApiContext from './ApiContext';\nimport PropTypes from 'prop-types';\n\nvar AddNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNote, _Component);\n\n  function AddNote() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddNote);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddNote)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: '',\n      content: '',\n      folderId: '',\n      modified: ''\n    };\n\n    _this.handleAddNote = function (e) {\n      e.preventDefault();\n      var newNote = {\n        note_name: _this.state.name,\n        date_modified: _this.state.modified,\n        note_content: _this.state.content,\n        folder_id: _this.state.folderId\n      };\n      fetch(\"\".concat(config.API_ENDPOINT, \"/notes\"), {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(newNote)\n      }).then(function (res) {\n        if (!res.ok) return res.json().then(function (e) {\n          return Promise.reject(e);\n        });\n      }).then(function () {\n        _this.context.addNote(newNote);\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        alert({\n          error: error\n        });\n      });\n    };\n\n    _this.getNoteName = function (e) {\n      _this.setState({\n        name: e.target.value\n      });\n    };\n\n    _this.getNoteContent = function (e) {\n      _this.setState({\n        content: e.target.value\n      });\n    };\n\n    _this.getNoteModified = function (e) {\n      _this.setState({\n        modified: new Date().toLocaleString()\n      });\n    };\n\n    _this.getNoteFolderId = function (e) {\n      _this.setState({\n        folderId: e.target.value\n      });\n    };\n\n    _this.validateNoteName = function () {\n      var note = _this.state.name;\n\n      if (!note) {\n        return 'Note name is required';\n      } else {\n        return null;\n      }\n    };\n\n    _this.validateContent = function () {\n      var note = _this.state.content;\n\n      if (!note) {\n        return 'Note content is required';\n      } else {\n        return null;\n      }\n    };\n\n    _this.validateFolder = function () {\n      var folder = _this.state.folderId;\n\n      if (!folder) {\n        return 'Note content is required';\n      } else {\n        return null;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AddNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var folders = this.context.folders;\n      return React.createElement(\"form\", {\n        className: \"addNoteOrFolder\",\n        onSubmit: function onSubmit(e) {\n          return _this2.handleAddNote(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"noteName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"New Note Name: \"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"noteName\",\n        value: this.state.name,\n        onChange: this.getNoteName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), this.validateNoteName && React.createElement(\"p\", {\n        className: \"validationElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.validateNoteName())), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"noteContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Content: \"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"noteName\",\n        value: this.state.content,\n        onChange: this.getNoteContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), this.validateContent && React.createElement(\"p\", {\n        className: \"validationElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.validateContent())), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"Choose folder...\",\n        value: this.state.folderId,\n        onChange: this.getNoteFolderId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        key: \"default\",\n        value: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Select folder\"), folders.map(function (folder) {\n        return React.createElement(\"option\", {\n          key: Number(folder.id),\n          value: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, folder.folder_name);\n      })), this.validateFolder && React.createElement(\"p\", {\n        className: \"validationElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.validateFolder())), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        disabled: this.validateNoteName() || this.validateContent() || this.validateFolder(),\n        type: \"submit\",\n        onClick: this.getNoteModified,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return AddNote;\n}(Component);\n\nAddNote.contextType = ApiContext;\nexport { AddNote as default };\nAddNote.propTypes = {\n  history: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/Users/Preet/Desktop/singh-noteful-client/src/AddNote.js"],"names":["React","Component","config","ApiContext","PropTypes","AddNote","state","name","content","folderId","modified","handleAddNote","e","preventDefault","newNote","note_name","date_modified","note_content","folder_id","fetch","API_ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","context","addNote","props","history","push","catch","error","alert","getNoteName","setState","target","value","getNoteContent","getNoteModified","Date","toLocaleString","getNoteFolderId","validateNoteName","note","validateContent","validateFolder","folder","folders","map","Number","id","folder_name","contextType","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport config from './config';\nimport ApiContext from './ApiContext';\nimport PropTypes from 'prop-types'\n\nexport default class AddNote extends Component {\n\n  state = {\n    name: '',\n    content: '',\n    folderId: '',\n    modified: ''\n  }\n\n  static contextType = ApiContext;\n\n  handleAddNote = (e) => {\n    e.preventDefault();\n\n    const newNote = {\n      note_name: this.state.name,\n      date_modified: this.state.modified,\n      note_content: this.state.content,\n      folder_id: this.state.folderId\n    };\n\n    fetch(`${config.API_ENDPOINT}/notes`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(newNote)\n    })\n      .then(res => {\n        if (!res.ok) return res.json().then(e => Promise.reject(e));\n      })\n      .then(() => {\n        this.context.addNote(newNote);\n        this.props.history.push('/');\n      })\n      .catch(error => {\n        alert({ error });\n      });\n  };\n\n  getNoteName = (e) => {\n    this.setState({ name: e.target.value });\n  }\n\n  getNoteContent = (e) => {\n    this.setState({ content: e.target.value });\n  }\n\n  getNoteModified = (e) => {\n    this.setState({ modified: new Date().toLocaleString() });\n  }\n\n  getNoteFolderId = (e) => {\n    this.setState({ folderId: e.target.value });\n  }\n\n  validateNoteName = () => {\n    let note = this.state.name;\n\n    if (!note) {\n      return 'Note name is required'\n    } else {\n      return null\n    }\n  }\n\n  validateContent = () => {\n    let note = this.state.content;\n\n    if (!note) {\n      return 'Note content is required'\n    } else {\n      return null\n    }\n  }\n\n  validateFolder = () => {\n    let folder = this.state.folderId;\n\n    if (!folder) {\n      return 'Note content is required'\n    } else {\n      return null\n    }\n  }\n\n  render() {\n    const { folders } = this.context;\n\n    return (\n      <form className='addNoteOrFolder' onSubmit={e => this.handleAddNote(e)}>\n        <div>\n          <label htmlFor='noteName'>New Note Name: </label>\n          <input type='text' id='noteName' value={this.state.name} onChange={ this.getNoteName } />\n          {this.validateNoteName && <p className='validationElement'>{this.validateNoteName()}</p>}\n        </div>\n        <div>\n          <label htmlFor='noteContent'>Content: </label>\n          <input type='text' id='noteName' value={this.state.content} onChange={ this.getNoteContent } />\n          {this.validateContent && <p className='validationElement'>{this.validateContent()}</p>}\n        </div>\n        <div>\n          <select name='Choose folder...' value={this.state.folderId} onChange={ this.getNoteFolderId }>\n            <option key=\"default\" value={null}>Select folder</option>\n            {folders.map((folder) => <option key={Number(folder.id)} value={folder.id}>{folder.folder_name}</option>)}\n          </select>\n          {this.validateFolder && <p className='validationElement'>{this.validateFolder()}</p>}\n        </div>\n        <div>\n          <button disabled={this.validateNoteName() || this.validateContent() || this.validateFolder()} \n                  type='submit' \n                  onClick={ this.getNoteModified }>\n                    Submit\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nAddNote.propTypes = {\n  history: PropTypes.object.isRequired\n}"]},"metadata":{},"sourceType":"module"}